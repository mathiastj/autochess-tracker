{"version":3,"sources":["components/MmrChart.js","App.js","serviceWorker.js","index.js"],"names":["MmrChart","dataPoints","this","props","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","point","value","timeFetched","Date","toLocaleString","err","return","reverse","fixData","react_default","a","createElement","es6","height","className","width","margin","top","right","left","bottom","dataKey","domain","wrapperStyle","borderColor","boxShadow","contentStyle","backgroundColor","labelStyle","fontWeight","color","type","stroke","yAxisId","Component","App","state","axios","get","res","setState","stats","components_MmrChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAyDeA,mLA9CJ,IACCC,EAAeC,KAAKC,MAApBF,WAER,IAAKA,EACH,OAAO,KAGT,IAOMG,EAPU,SAAAH,GAAc,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC5B,QAAAC,EAAAC,EAAoBT,EAApBU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAgC,KAArBU,EAAqBN,EAAAO,MAC9BD,EAAME,YAAc,IAAIC,KAAKH,EAAME,aAAaE,kBAFtB,MAAAC,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,GAI5B,OAAON,EAAWqB,UAGPC,CAAQtB,GAErB,OACEuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,UAAU,mBAC1CL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEG,MAAO,IACPF,OAAQ,IACRxB,KAAMA,EACN2B,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/CX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,QAAQ,gBACfZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,QAAQ,WAAWC,OAAQ,CAAC,OAAQ,UAC3Cb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEW,aAAc,CACZC,YAAa,QACbC,UAAW,sCAEbC,aAAc,CAAEC,gBAAiB,4BACjCC,WAAY,CAAEC,WAAY,OAAQC,MAAO,aAE3CrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEmB,KAAK,WACLV,QAAQ,WACRW,OAAO,UACPC,QAAS,aAvCEC,aCgBRC,6MAnBbC,MAAQ,oNAGYC,IAAMC,IAAI,iBAAtBC,SAENpD,KAAKqD,SAAS,CAAEC,MAAOF,EAAIlD,0IAI3B,OACEoB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAC+B,EAAD,CAAUxD,WAAYC,KAAKiD,MAAMK,iBAdzBP,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7c0162e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Line,\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from \"recharts\";\r\n\r\nclass MmrChart extends Component {\r\n  render() {\r\n    const { dataPoints } = this.props;\r\n\r\n    if (!dataPoints) {\r\n      return null;\r\n    }\r\n\r\n    const fixData = dataPoints => {\r\n      for (const point of dataPoints) {\r\n        point.timeFetched = new Date(point.timeFetched).toLocaleString();\r\n      }\r\n      return dataPoints.reverse();\r\n    };\r\n\r\n    const data = fixData(dataPoints);\r\n\r\n    return (\r\n      <ResponsiveContainer height={500} className=\"chart-container\">\r\n        <LineChart\r\n          width={400}\r\n          height={400}\r\n          data={data}\r\n          margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n        >\r\n          <XAxis dataKey=\"timeFetched\" />\r\n          <YAxis dataKey=\"newScore\" domain={[\"auto\", \"auto\"]} />\r\n          <Tooltip\r\n            wrapperStyle={{\r\n              borderColor: \"white\",\r\n              boxShadow: \"2px 2px 3px 0px rgb(204, 204, 204)\"\r\n            }}\r\n            contentStyle={{ backgroundColor: \"rgba(255, 255, 255, 0.8)\" }}\r\n            labelStyle={{ fontWeight: \"bold\", color: \"#666666\" }}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"newScore\"\r\n            stroke=\"#ff7300\"\r\n            yAxisId={0}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MmrChart;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport MmrChart from \"./components/MmrChart\";\n\nclass App extends Component {\n  // default State object\n  state = {};\n\n  async componentDidMount() {\n    const res = await axios.get(\"/stats\");\n\n    this.setState({ stats: res.data });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MmrChart dataPoints={this.state.stats} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}